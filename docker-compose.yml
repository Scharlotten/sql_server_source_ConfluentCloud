version: "2.1"

services:
  sqlserver_my:
    container_name: sqlserver_my
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "yourStrong(!)Password"
      MSSQL_AGENT_ENABLED: "true"
      MSSQL_PID: "Standard"
      HOSTNAME: "server1"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -U sa -P $$MSSQL_SA_PASSWORD -Q 'select 1'
    volumes:
      - ./SQLs:/scripts/
    ports:
      - "1433:1433"
    networks:
      - anna
    command:
      - /bin/bash
      - -c
      - |
        # Launch MSSQL and send to background
        /opt/mssql/bin/sqlservr &
        # Wait 30 seconds for it to be available
        # (lame, I know, but there's no nc available to start prodding network ports)
        sleep 40
        # Run every script in /scripts
        # TODO set a flag so that this is only done once on creation,
        #      and not every time the container runs
        for foo in /scripts/*.sql
          do /opt/mssql-tools/bin/sqlcmd -U sa -P $$MSSQL_SA_PASSWORD -l 30 -e -i $$foo
          echo "did "$$foo
        done
        # So that the container doesn't shut down, sleep this thread
        sleep infinity

  connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: connect
    ports:
     -  8083:8083
    depends_on:
      sqlserver_my:
        condition: service_healthy
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "https://pkc-e8mp5.eu-west-1.aws.confluent.cloud:9092"
      CONNECT_GROUP_ID: "first_connect2"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-storage"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offset-storage"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_SASL_JAAS_CONFIG: 'org.apache.kafka.common.security.plain.PlainLoginModule required  username="${API_KEY}" password="${API_SECRET}";'
      CONNECT_SASL_MECHANISM: PLAIN
      # Connect producer
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_PRODUCER_SASL_JAAS_CONFIG: 'org.apache.kafka.common.security.plain.PlainLoginModule required  username="${API_KEY}" password="${API_SECRET}";'
      CONNECT_PRODUCER_SASL_MECHANISM: PLAIN
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: 'org.apache.kafka.common.security.plain.PlainLoginModule required  username="${API_KEY}" password="${API_SECRET}";'
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      # Connect consumer
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_CONSUMER_SASL_JAAS_CONFIG: 'org.apache.kafka.common.security.plain.PlainLoginModule required  username="${API_KEY}" password="${API_SECRET}";'
      CONNECT_CONSUMER_SASL_MECHANISM: PLAIN
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: 'org.apache.kafka.common.security.plain.PlainLoginModule required  username="${API_KEY}" password="${API_SECRET}";'
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.0.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components, /etc/kafka-connect/jars"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      - ./jars:/etc/kafka-connect/jars
      - ./sql_server:/workarea

    networks:
      - anna
    command: ["connect-standalone", "/workarea/worker.properties", "/workarea/sql-server_conn.properties" ]


volumes:
  sql_server:
  jars:
  SQLs:


networks:
  anna:

